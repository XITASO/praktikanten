@page "/tictactoe3"
@using PlayTogether.Web.Services
@inject GameService3 GameService3
@inject NavigationManager NavigationManager
@inject Roomservice Roomservice
<h3>Tic-Tac-Toe Game(Room 3)</h3>
Reset
<div style="margin-bottom: 15px;">
    <input placeholder="Player X Name" @bind="playerXInput" />
    <input placeholder="Player O Name" @bind="playerOInput" style="margin-left: 10px;" />
    <button class="restart-button" @onclick="SetPlayerNames" style="margin-left: 10px;">Set Player Names</button>
</div>

@if (!string.IsNullOrEmpty(GameService3.WinnerMessage))
{
<div class="winner-text">@GameService3.WinnerMessage</div>
}

<button class="restart-button" @onclick="LeafRoom" style="margin-left: 10px">Leave Room</button>

<div class="scoreboard" style="margin: 10px 0;">
    <strong>@GameService3.PlayerXName</strong>: @GameService3.ScoreX / <strong>@GameService3.PlayerOName</strong>: @GameService3.ScoreO
</div>
<div class="spiel-flaeche">
    @for (int row = 0; row < 3; row++)
    {
    int fixedRow = row;
    <div class="bord-reihe">
        @for (int col = 0; col < 3; col++)
        {
        int fixedCol = col;
        <button class="zelle"
                @onclick="() => MakeMoveIfAllowed(fixedRow, fixedCol)"
                disabled="@(!CanPlay)">
            @GameService3.Board[fixedRow, fixedCol]
        </button>
        }
    </div>
    }
</div>


@code {
private string playerXInput = "";
private string playerOInput = "";
private string spectatorInput = "";
public bool Roomleaft = true;
private bool disposed = false;

private bool CanPlay =>
!string.IsNullOrWhiteSpace(GameService3.PlayerXName) &&
!string.IsNullOrWhiteSpace(GameService3.PlayerOName);

private void SetPlayerNames()
{
if (!string.IsNullOrWhiteSpace(playerXInput))
    GameService3.PlayerXName = playerXInput.Trim();

if (!string.IsNullOrWhiteSpace(playerOInput))
    GameService3.PlayerOName = playerOInput.Trim();

GameService3.ResetScore();
}


private void MakeMoveIfAllowed(int row, int col)
{
if (CanPlay)
{
    GameService3.MakeMove(row, col);
}
}

protected override void OnInitialized()
{
    GameService3.StateChanged += OnGameStateChanged;
    Roomleaft = false;
}

private void OnGameStateChanged(object? sender, EventArgs e)
{
InvokeAsync(StateHasChanged);
}

public void LeafRoom()
{
    Roomservice.room3leafe();
    NavigationManager.NavigateTo("/tictactoe");
    Roomleaft = true;
    
}

public void Dispose()
{
    GameService3.StateChanged -= OnGameStateChanged;

    if (!disposed)
    {
        if (!Roomleaft)
        {
            Roomservice.room3leafe();
        }

        disposed = true;
    }
}

}

@implements IDisposable

<style>
    .spiel-flaeche {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .bord-reihe {
        display: flex;
        gap: 10px;
    }

    .zelle {
        width: 90px;
        height: 90px;
        font-size: 2rem;
        background-color: #f0f0f0;
        border: 2px solid #333;
        border-radius: 8px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
    }

    .zelle:disabled {
        cursor: not-allowed;
        background-color: #ddd;
    }

    .winner-text {
        margin-top: 20px;
        font-size: 1.8rem;
        color: green;
        font-weight: bold;
        text-align: center;
    }

    .restart-button {
        margin: 15px 5px 15px 0;
        padding: 12px 24px;
        font-size: 1.1rem;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        display: inline-block;
    }

    .restart-button:disabled {
        cursor: not-allowed;
        background-color: #a0a0a0;
    }

    .restart-button:hover:not(:disabled) {
        background-color: #0056b3;
    }

    .spectator-section input {
        padding: 8px;
        margin-right: 8px;
        font-size: 1rem;
    }
</style>