@page "/tictactoe1"
@using PlayTogether.Web.Services
@inject GameService GameService
@inject NavigationManager NavigationManager
@inject Roomservice Roomservice

<h3>Tic-Tac-Toe Game</h3>

<div style="margin-bottom: 15px;">
    <input placeholder="Your Name" @bind="localPlayerName" />
</div>

<div style="margin-bottom: 15px;">
    <input placeholder="Player X Name" @bind="playerXInput" />
    <input placeholder="Player O Name" @bind="playerOInput" style="margin-left: 10px;" />
    <button class="restart-button" @onclick="SetPlayerNames" style="margin-left: 10px;">Set Player Names</button>
</div>

<div class="spectator-section" style="margin-bottom: 20px;">
    <input placeholder="Enter spectator name" @bind="spectatorInput" />
    <button class="restart-button" @onclick="BecomeSpectator" style="margin-left: 10px;">Set Spectator</button>
    <button class="restart-button" @onclick="LeaveSpectator" style="margin-left: 10px;">Clear Spectator</button>
</div>

@if (!string.IsNullOrEmpty(GameService.WinnerMessage))
{
    <div class="winner-text">@GameService.WinnerMessage</div>
}

<button class="restart-button" @onclick="GameService.ResetGame" disabled="@isSpectator">RESTART GAME</button>
<button class="restart-button" @onclick="GameService.ResetScore" style="margin-left: 10px;" disabled="@isSpectator">RESET SCORE</button>
<button class="restart-button" @onclick="LeafRoom" style="margin-left: 10px">Leave Room</button>

<div class="scoreboard" style="margin: 10px 0;">
    <strong>@GameService.PlayerXName</strong>: @GameService.ScoreX / <strong>@GameService.PlayerOName</strong>: @GameService.ScoreO
</div>

@if (!string.IsNullOrWhiteSpace(localRole))
{
    <div style="margin-top: 10px; font-weight: bold;">
        You are playing as: @localRole (@localPlayerName)
    </div>
}

@if (!string.IsNullOrEmpty(GameService.SpectatorName))
{
    <div class="spectator-info" style="margin-top: 10px; font-weight: bold; color: darkorange;">
        Spectator: @GameService.SpectatorName is watching the game!
    </div>
}

<div class="spiel-flaeche">
    @for (int row = 0; row < 3; row++)
    {
        int fixedRow = row;
        <div class="bord-reihe">
            @for (int col = 0; col < 3; col++)
            {
                int fixedCol = col;
                <button class="zelle"
                        @onclick="() => MakeMoveIfAllowed(fixedRow, fixedCol)"
                        disabled="@(!CanPlay || GameService.Board[fixedRow, fixedCol] != null)">
                    @GameService.Board[fixedRow, fixedCol]
                </button>
            }
        </div>
    }
</div>

@code {
    private string playerXInput = "";
    private string playerOInput = "";
    private string spectatorInput = "";
    private string localPlayerName = "";
    private string localRole = "";
    private bool isSpectator = false;

    private bool CanPlay =>
        (localRole == GameService.CurrentPlayer) &&
        !string.IsNullOrWhiteSpace(GameService.PlayerXName) &&
        !string.IsNullOrWhiteSpace(GameService.PlayerOName) &&
        !isSpectator &&
        !GameService.GameOver;

    private void SetPlayerNames()
    {
        if (!string.IsNullOrWhiteSpace(playerXInput))
        {
            GameService.PlayerXName = playerXInput.Trim();
            if (playerXInput.Trim() == localPlayerName)
                localRole = "X";
        }

        if (!string.IsNullOrWhiteSpace(playerOInput))
        {
            GameService.PlayerOName = playerOInput.Trim();
            if (playerOInput.Trim() == localPlayerName)
                localRole = "O";
        }

        GameService.ResetScore();
    }

    private void BecomeSpectator()
    {
        if (!string.IsNullOrWhiteSpace(spectatorInput))
        {
            localPlayerName = spectatorInput.Trim();
            localRole = "Spectator";
            isSpectator = true;
            GameService.SetSpectatorName(spectatorInput);
            spectatorInput = "";
        }
    }

    private void LeaveSpectator()
    {
        isSpectator = false;
        localRole = "";
        GameService.ClearSpectator();
    }

    private void MakeMoveIfAllowed(int row, int col)
    {
        if (CanPlay)
        {
            GameService.MakeMove(row, col);
        }
    }

    protected override void OnInitialized()
    {
        GameService.StateChanged += OnGameStateChanged;
    }

    private void OnGameStateChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        GameService.StateChanged -= OnGameStateChanged;
        Roomservice.room1leafe();
    }

    public void LeafRoom()
    {
        Roomservice.room1leafe();
        NavigationManager.NavigateTo("/tictactoe");   
        
    }
}

@implements IDisposable

<style>
    .spiel-flaeche {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .bord-reihe {
        display: flex;
        gap: 10px;
    }

    .zelle {
        width: 90px;
        height: 90px;
        font-size: 2rem;
        background-color: #f0f0f0;
        border: 2px solid #333;
        border-radius: 8px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
    }

        .zelle:disabled {
            cursor: not-allowed;
            background-color: #ddd;
        }

    .winner-text {
        margin-top: 20px;
        font-size: 1.8rem;
        color: green;
        font-weight: bold;
        text-align: center;
    }

    .restart-button {
        margin: 15px 5px 15px 0;
        padding: 12px 24px;
        font-size: 1.1rem;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        display: inline-block;
    }

        .restart-button:disabled {
            cursor: not-allowed;
            background-color: #a0a0a0;
        }

        .restart-button:hover:not(:disabled) {
            background-color: #0056b3;
        }

    .spectator-section input {
        padding: 8px;
        margin-right: 8px;
        font-size: 1rem;
    }
</style>